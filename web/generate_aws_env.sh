#!/usr/bin/env bash

# Generate a environment file from retrieving AWS secrets

# Variables
AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-"us-west-2"}
ENV_FILE=${ENV_FILE:-".env"}
SECRETS_YAML=${SECRETS_YAML:-".env.secrets.yaml"}

# Functions

## Check for required tools
check_requirements() {
    if ! command -v aws ; then
        echo "aws not found!"
        exit 1
    fi

    if ! command -v jq ; then
        echo "jq not found!"
        exit 1
    fi

    if ! command -v yq ; then
        echo "yq not found!"
        exit 1
    fi
}

## Retrieve Secret Values
get_secret_values() {
    local secret_name="$1"
    echo "Retrieving secret: $secret_name"

    local secret_string
    secret_string=$(aws secretsmanager get-secret-value \
        --secret-id "$secret_name" \
        --region "$AWS_DEFAULT_REGION" \
        --query SecretString \
        --output text 2>/dev/null)

    if [ -z "$secret_string" ]; then
        echo "Error: Could not retrieve secret '$secret_name'. Check permissions and secret existence." >&2
        return 1
    fi

    # Use jq to parse the SecretString (which is a JSON string)
    # and iterate over its key-value pairs.
    echo "$secret_string" | jq -r 'to_entries[] | "\(.key)=\(.value)"'
    return 0
}

## Create the environment file
generate_env_file() {
    echo "# Generated by $(basename "$0") on $(date)" > "$ENV_FILE"
    echo "" >> "$ENV_FILE"

    # Get top-level keys (secret names) from the YAML file
    secret_names=$(yq eval 'keys | .[]' "$SECRETS_YAML")

    # Loop through each secret name found in the YAML
    while IFS= read -r secret_name; do
        # Skip empty lines that yq might output
        if [ -z "$secret_name" ]; then
            continue
        fi

        echo "Processing keys for secret: $secret_name"

        # Fetch values from AWS Secrets Manager and append to .env
        if ! get_secret_values "$secret_name" >> "$ENV_FILE"; then
            echo "Failed to process secret: $secret_name. Aborting."
            rm -f "$ENV_FILE" # Clean up the partially created file
            exit 1
        fi

        echo "" >> "$ENV_FILE"
    done <<< "$secret_names"

    echo "Successfully generated $ENV_FILE"
}

# Logic

check_requirements
generate_env_file